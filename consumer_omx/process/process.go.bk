package process
import (
		"consumer/formatomx"
		"fmt"
	 	//"os"
	 //	"log"
	//	 "strconv"
	 //	 "encoding/json"
	//	"io/ioutil"
)
 
 	
func Do (c *formatomx.Omxkafka ) int  { 
	//fmt.Println("do ")
	///fmt.Println(c.OmxtrackingID +
//	","+ c.Order.Channel +
	//","+ strconv.Itoa( c.Order.OrderType ) +
//	","+ c.Order.ResponseCode +
//	","+  c.Order.ResponseMsg +
//	","+  c.Customer.Ou[0].Subscriber[0].SubscriberNumber +
//	"\n" )
 
  for key, value := range  c.Customer.Ou[0].Subscriber[0].ResourceInfo[0]   {
    	// fmt.Printf("%v ",c.Customer.Ou[0].Subscriber[0].ResourceInfo[0].ResourceName )
		fmt.Println(key,value)
	}
	// resouedatainfo :=  &formatomx.ResourceIn{}
	// resouedatainfo  := &c.Customer.Ou[0].Subscriber[0].ResourceInfo; 
	// fmt.Println(string(resouedatainfo ))
	//if  err := json.Unmarshal(c.Customer.Ou[0].Subscriber[0].SubscriberNumber.ResourceInfo  ,resouedatainfo); err != nil {
	//	log.Error("invalid msg : " + string(c.Customer.Ou[0].Subscriber[0].SubscriberNumber.ResourceInfo ))
	//}else {
	//	fmt.Println("oooooooo")
	//}
	 
	//var s string 
	//s  = "omx id = "+ c.OmxtrackingID + "\n"
   // omxtrackingID  ,
	//order.channel,
//	order.orderType = 4 ,
//	order.responseCode,
//	order.responseMsg,
//	customer.ou[0].subscriber[0].subscriberNumber,


	//file, err := os.OpenFile("data.txt", os.O_WRONLY|os.O_APPEND, 0644)
	//if err != nil {
	//	log.Fatalf("failed opening file: %s", err)
	//}
	//defer file.Close()
	//+ c.Order.orderType + c.Order.responseCode + c.Oder.responseMsg + c.Customer.Ou[0].subscriber[0].subscriberNumber  c.Order.responseCode  + "\n"  
	//len, err := file.WriteString( 
	///	c.OmxtrackingID +
	//	","+ c.Order.Channel +
	///	","+ strconv.Itoa( c.Order.OrderType ) +
	//	","+ c.Order.ResponseCode +
	//	","+  c.Order.ResponseMsg +
	//	","+  c.Customer.Ou[0].Subscriber[0].SubscriberNumber +
	//	"\n" )
	 //	if err != nil {
	//	log.Fatalf("failed writing to file: %s", err)
	//}
	//fmt.Printf("\nLength: %d bytes", len)
	//fmt.Printf("\nFile Name: %s", file.Name())
	return 1

}


func GetValueIMSI (d  *formatomx.ResourceIn ) string {
	
	return "xxxxx"
}